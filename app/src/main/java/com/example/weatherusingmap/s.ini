🎯 Complete Django Project: Fake Job Detection with Login System

📁 **Folder Structure**
```
FakeJobDetection/
│
├── FakeJobDetection/              # Project settings
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
│
├── predictor/                    # Prediction app
│   ├── migrations/
│   ├── templates/
│   │   └── predictor/
│   │       └── form.html
│   ├── __init__.py
│   ├── views.py
│   ├── urls.py
│   └── admin.py
│
├── users/                        # Authentication app
│   ├── templates/
│   │   └── registration/
│   │       ├── login.html
│   │       └── register.html
│   ├── __init__.py
│   ├── views.py
│   ├── urls.py
│   └── admin.py
│
├── ml/
│   ├── model.pkl
│   └── vectorizer.pkl
│
├── templates/
│   └── base.html
│
├── db.sqlite3
└── manage.py
```

---

📄 `FakeJobDetection/settings.py` (Important Sections)
```python
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'predictor',
    'users',
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/login/'
```

---

📄 `FakeJobDetection/urls.py`
```python
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('predictor.urls')),
    path('', include('users.urls')),
    path('', include('django.contrib.auth.urls')),
]
```

---

📄 `predictor/views.py`
```python
from django.shortcuts import render
from django.contrib.auth.decorators import login_required
import joblib, os
from django.conf import settings

model = joblib.load(os.path.join(settings.BASE_DIR, 'ml/model.pkl'))
vectorizer = joblib.load(os.path.join(settings.BASE_DIR, 'ml/vectorizer.pkl'))

@login_required
def predict_view(request):
    prediction = None
    if request.method == 'POST':
        title = request.POST['title']
        location = request.POST['location']
        description = request.POST['description']
        requirements = request.POST['requirements']
        telecommuting = request.POST['telecommuting']
        has_logo = request.POST['has_company_logo']
        has_questions = request.POST['has_questions']

        text = f"{title} {location} {description} {requirements} {telecommuting} {has_logo} {has_questions}"
        vector = vectorizer.transform([text])
        result = model.predict(vector)[0]
        prediction = "Fake" if result == 1 else "Legit"

    return render(request, 'predictor/form.html', {'prediction': prediction})
```

---

📄 `predictor/urls.py`
```python
from django.urls import path
from .views import predict_view

urlpatterns = [
    path('', predict_view, name='predict'),
]
```

---

📄 `predictor/templates/predictor/form.html`
```html
<!DOCTYPE html>
<html>
<head>
    <title>Fake Job Detection</title>
</head>
<body>
    <h2>Enter Job Details</h2>
    <form method="POST">
        {% csrf_token %}
        <label>Title:</label><br>
        <input type="text" name="title" required><br><br>

        <label>Location:</label><br>
        <input type="text" name="location" required><br><br>

        <label>Description:</label><br>
        <textarea name="description" required></textarea><br><br>

        <label>Requirements:</label><br>
        <textarea name="requirements" required></textarea><br><br>

        <label>Telecommuting (0/1):</label><br>
        <input type="number" name="telecommuting" min="0" max="1" required><br><br>

        <label>Has Company Logo (0/1):</label><br>
        <input type="number" name="has_company_logo" min="0" max="1" required><br><br>

        <label>Has Questions (0/1):</label><br>
        <input type="number" name="has_questions" min="0" max="1" required><br><br>

        <input type="submit" value="Predict">
    </form>

    {% if prediction %}
        <h3>Prediction: {{ prediction }}</h3>
    {% endif %}
</body>
</html>
```

---

📄 `users/views.py`
```python
from django.shortcuts import render, redirect
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth import login

def register_view(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect('/')
    else:
        form = UserCreationForm()
    return render(request, 'registration/register.html', {'form': form})
```

---

📄 `users/urls.py`
```python
from django.urls import path
from .views import register_view

urlpatterns = [
    path('register/', register_view, name='register'),
]
```

---

📄 `users/templates/registration/login.html`
```html
<h2>Login</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Login</button>
</form>
```

📄 `users/templates/registration/register.html`
```html
<h2>Register</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Register</button>
</form>
```

---

This is the full, clean implementation. No further edits are necessary. Just place your ML model and vectorizer in the `ml/` folder.

Would you like the final zipped project or deployment steps next?



FakeJobDetection/
│
├── db.sqlite3
├── manage.py
│
├── ml/
│   ├── model.pkl
│   └── vectorizer.pkl
│
├── templates/
│   └── base.html
│
├── FakeJobDetection/
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
│
├── predictor/
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── tests.py
│   ├── views.py
│   ├── urls.py
│   ├── migrations/
│   │   └── __init__.py
│   └── templates/
│       └── predictor/
│           └── form.html
│
├── users/
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── tests.py
│   ├── views.py
│   ├── urls.py
│   ├── migrations/
│   │   └── __init__.py
│   └── templates/
│       └── registration/
│           ├── login.html
│           └── register.html
